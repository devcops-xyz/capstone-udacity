Parameters:
    EnvironmentName:
        Description: Name of the environment
        Type: String

    VPCCIDR:
        Description: VPC CIDR
        Type: String

    Subnet1CIDR:
        Description: Subnet 1 CIDR
        Type: String

    Subnet2CIDR:
        Description: Subnet 2 CIDR
        Type: String

    NodeInstanceType:
        Description: Instance type of the node instances
        Type: String

    KeyName:
        Description: KayPair Name
        Type: String

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock:  !Ref VPCCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
            -   Key: Name
                Value: !Sub '${EnvironmentName}-VPC'

    InternetGateway:
        Type: "AWS::EC2::InternetGateway"

    VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
            -   Key: Name
                Value: Public Subnets
            -   Key: Network
                Value: Public

    Route:
        DependsOn: VPCGatewayAttachment
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref RouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    Subnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Ref Subnet1CIDR
            MapPublicIpOnLaunch: true
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            Tags:
            -   Key: Name
                Value: !Sub "${EnvironmentName}-Subnet1"

    Subnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            CidrBlock: !Ref Subnet2CIDR
            MapPublicIpOnLaunch: true
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            Tags:
            -   Key: Name
                Value: !Sub "${EnvironmentName}-Subnet2"

    NatGateway01:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
            SubnetId: !Ref Subnet1
            Tags:
            -   Key: Name
                Value: !Sub '${EnvironmentName}-NatGatewayAZ1'
    
    NatGateway02:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
            SubnetId: !Ref Subnet2
            Tags:
            -   Key: Name
                Value: !Sub '${EnvironmentName}-NatGatewayAZ2'

    NatGatewayEIP1:
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc

    NatGatewayEIP2:
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc

    Subnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref Subnet1
            RouteTableId: !Ref RouteTable

    Subnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref Subnet2
            RouteTableId: !Ref RouteTable

    SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Cluster security group
            VpcId: !Ref VPC

    ClusterRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: "Allow"
                    Principal:
                        Service:
                        -   "eks.amazonaws.com" 
                    Action: 
                    -   "sts:AssumeRole"
            Tags:
            -   Key: Name
                Value: !Sub "${EnvironmentName}-Role"
            Path: "/"
            ManagedPolicyArns: [
                "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
                "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
            ]

    NodeRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        -   ec2.amazonaws.com
                    Action:
                    -   "sts:AssumeRole"
            ManagedPolicyArns:
            -   "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
            -   "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
            -   "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

    Cluster:
        Type: AWS::EKS::Cluster
        Properties:
            Name: !Sub '${EnvironmentName}-cluster'
            Version: '1.14'
            RoleArn: !GetAtt ClusterRole.Arn
            ResourcesVpcConfig:
                SecurityGroupIds:
                -   !Ref SecurityGroup
                SubnetIds:
                -   !Ref Subnet1
                -   !Ref Subnet2

    NodeGroup:
        Type: 'AWS::EKS::Nodegroup'
        DependsOn: Cluster
        Properties:
            ClusterName: !Sub '${EnvironmentName}-cluster'
            NodeRole: !GetAtt NodeRole.Arn
            InstanceTypes:
            -   !Ref NodeInstanceType
            RemoteAccess:
                Ec2SshKey: !Ref KeyName
            Subnets:
            -   !Ref Subnet1
            -   !Ref Subnet2
            ScalingConfig:
                DesiredSize: 2
                MinSize: 1
                MaxSize: 4

Outputs:
    Cluster: 
        Description: EKS Cluster
        Value: !Ref Cluster

    ClusterEndpoint:
        Value: !GetAtt Cluster.Endpoint
        Description: Cluster Endpoint

    SubnetIds:
        Description: All subnets in the VPC
        Value: !Join [ ",", [ !Ref Subnet1, !Ref Subnet2 ] ]

    SecurityGroup:
        Description: EKS Security group
        Value: !Join [ ",", [ !Ref SecurityGroup ] ]

    VpcId:
        Description: The VPC Id
        Value: !Ref VPC

    NodeGroupArn:
        Value: !GetAtt NodeGroup.Arn
        Description: Cluster Worker Nodes